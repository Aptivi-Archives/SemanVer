{
  "api/SemanVer.Instance.SemVer.html": {
    "href": "api/SemanVer.Instance.SemVer.html",
    "title": "Class SemVer | SemanVer API - Aptivi Internals",
    "keywords": "Class SemVer Class containing semantic versioning information Inheritance object SemVer Namespace: SemanVer.Instance Assembly: SemanVer.dll Syntax public class SemVer Constructors | Improve this Doc View Source SemVer(int, int, int, string, string) Makes a new instance of this class Declaration protected SemVer(int major, int minor, int patch, string preReleaseInfo, string buildMetadata) Parameters Type Name Description int major Major version int minor Minor version int patch Patch version string preReleaseInfo Info about the pre-release version string buildMetadata Info about the build metadata Properties | Improve this Doc View Source BuildMetadata Gets the build metadata part of the version Declaration public string BuildMetadata { get; } Property Value Type Description string | Improve this Doc View Source MajorVersion Gets the major version part of the version Declaration public int MajorVersion { get; } Property Value Type Description int | Improve this Doc View Source MinorVersion Gets the minor version part of the version Declaration public int MinorVersion { get; } Property Value Type Description int | Improve this Doc View Source PatchVersion Gets the patch version part of the version Declaration public int PatchVersion { get; } Property Value Type Description int | Improve this Doc View Source PreReleaseInfo Gets the pre-release information part of the version Declaration public string PreReleaseInfo { get; } Property Value Type Description string | Improve this Doc View Source SpecialVersion Gets the special part of the version (PreReleaseInfo and BuildMetadata) Declaration public string SpecialVersion { get; } Property Value Type Description string Methods | Improve this Doc View Source CompareTo(SemVer) Compares between the two semantic version instances Declaration public int CompareTo(SemVer other) Parameters Type Name Description SemVer other The other semantic version instance to compare this instance with Returns Type Description int 0 if both versions are equal. 1 if this instance is newer than the other instance. -1 if this instance is older than the other instance. See Remarks for more info. Remarks Normally, what is returned according to the Returns section is normal. However, there are some special conditions. If the other instance is null, this instance is assumed to be the newer version. If the first three version parts (major, minor, patch) differ, this function returns immediately with the comparison results. However, if these equal, it goes on to comparing the special version part (pre-release info and build metadata info) and returns the following: 0 if both the special versions are empty 1 if this special version is empty -1 if the other special version is empty Otherwise, ordinal comparison is performed. | Improve this Doc View Source Equals(SemVer) Checks to see whether all the version elements are equal to these elements in the other instance. Simply, checks to see whether this SemVer instance equals the other SemVer instance. Declaration public bool Equals(SemVer other) Parameters Type Name Description SemVer other A SemVer instance to compare this SemVer instance with Returns Type Description bool True if both instances have equal values. False otherwise. | Improve this Doc View Source Equals(object) Declaration public override bool Equals(object o) Parameters Type Name Description object o Returns Type Description bool Overrides object.Equals(object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Improve this Doc View Source IsNewerThan(SemVer) Checks to see whether this SemVer instance contains a version newer than the other SemVer instance. Declaration public bool IsNewerThan(SemVer other) Parameters Type Name Description SemVer other A SemVer instance to compare this SemVer instance with Returns Type Description bool True if the other SemVer instance contains a version that is older than this instance. False otherwise. | Improve this Doc View Source IsOlderThan(SemVer) Checks to see whether this SemVer instance contains a version older than the other SemVer instance. Declaration public bool IsOlderThan(SemVer other) Parameters Type Name Description SemVer other A SemVer instance to compare this SemVer instance with Returns Type Description bool True if the other SemVer instance contains a version that is newer than this instance. False otherwise. | Improve this Doc View Source Parse(string) Parses the semantic version string Declaration public static SemVer Parse(string value) Parameters Type Name Description string value Value that contains a SemVer 2.0 compliant string Returns Type Description SemVer A SemVer class instance containing version information. Exceptions Type Condition SemVerException | Improve this Doc View Source ToString() Converts the version instance to the string representation (a SemVer 2.0 compliant string) Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Operators | Improve this Doc View Source operator ==(SemVer, SemVer) Declaration public static bool operator ==(SemVer a, SemVer b) Parameters Type Name Description SemVer a SemVer b Returns Type Description bool | Improve this Doc View Source operator >(SemVer, SemVer) Declaration public static bool operator >(SemVer a, SemVer b) Parameters Type Name Description SemVer a SemVer b Returns Type Description bool | Improve this Doc View Source operator >=(SemVer, SemVer) Declaration public static bool operator >=(SemVer a, SemVer b) Parameters Type Name Description SemVer a SemVer b Returns Type Description bool | Improve this Doc View Source operator !=(SemVer, SemVer) Declaration public static bool operator !=(SemVer a, SemVer b) Parameters Type Name Description SemVer a SemVer b Returns Type Description bool | Improve this Doc View Source operator <(SemVer, SemVer) Declaration public static bool operator <(SemVer a, SemVer b) Parameters Type Name Description SemVer a SemVer b Returns Type Description bool | Improve this Doc View Source operator <=(SemVer, SemVer) Declaration public static bool operator <=(SemVer a, SemVer b) Parameters Type Name Description SemVer a SemVer b Returns Type Description bool"
  },
  "api/SemanVer.Instance.html": {
    "href": "api/SemanVer.Instance.html",
    "title": "Namespace SemanVer.Instance | SemanVer API - Aptivi Internals",
    "keywords": "Namespace SemanVer.Instance Classes SemVer Class containing semantic versioning information"
  },
  "index.html": {
    "href": "index.html",
    "title": "What is SemanVer? | SemanVer API - Aptivi Internals",
    "keywords": "What is SemanVer? SemanVer is a C# library that parses your semantic version strings according to the SemVer 2.0 standards. What is this web page? This webpage is an API documentation for mod developers to be used as reference. It constantly gets updated as we push the updates to the main and servicing versions of this project. If you still intend to use a documentation specific to your preferred version of SemanVer, you may refer to the releases page of the project and download the attached <version>-doc.rar file. To get started using the documentation, select API Documentation from the top menu and select a namespace to get a clear overview of the API. Feedback If you wish to leave feedback to us about this API reference website, use the issue tracker of the project. If you wish to contribute to the documentation of the API, go to the project source code and make your improvements there on a draft Pull Request; we don't support override files that are made by clicking on Improve this doc. Any meaningful contributions are welcome. Copyright (c) 2022-2023 Aptivi. All rights reserved."
  }
}